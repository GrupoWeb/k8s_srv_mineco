package com.egoveris.vucfront.base.sections;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.apache.commons.lang3.StringUtils;
import org.primefaces.event.TabChangeEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.terasoluna.plus.core.i18n.DefaultLocaleMessageSource;

import com.egoveris.te.model.model.DocumentoTVDTO;
import com.egoveris.te.model.model.TomaVistaResponse;
import com.egoveris.te.ws.model.ExternalHistorialOperacionDTO;
import com.egoveris.te.ws.service.ExternalHistorialOperacionService;
import com.egoveris.te.ws.service.ITomaVistaExternalService;
import com.egoveris.vucfront.base.exception.DownloadDocumentException;
import com.egoveris.vucfront.base.mbeans.steps.StepParentMb;
import com.egoveris.vucfront.base.util.ConstantsUrl;
import com.egoveris.vucfront.base.util.MessageType;
import com.egoveris.vucfront.model.exception.ValidacionException;
import com.egoveris.vucfront.model.model.DocumentoDTO;
import com.egoveris.vucfront.model.model.TipoDocumentoDTO;
import com.egoveris.vucfront.model.service.DocumentoService;
import com.egoveris.vucfront.model.util.BusinessFormatHelper;
import com.egoveris.vucfront.model.util.EstadoTramiteEnum;

@ManagedBean
@ViewScoped
public class TomaVistaMb extends StepParentMb {

	private static final long serialVersionUID = -1102042124815168577L;
	private static final Logger LOG = LoggerFactory.getLogger(TomaVistaMb.class);
	private static final String TAB_HISTORIAL_PASES = "tabHistorialPases";

	@ManagedProperty("#{historialOperacionService}")
	private ExternalHistorialOperacionService externalHistorialOperacionService;
	@ManagedProperty("#{tomavistaExternalService}")
	private ITomaVistaExternalService tomaVistaExternalService;
	@ManagedProperty("#{documentoServiceImpl}")
	private DocumentoService documentoService;
	@ManagedProperty("#{msg}")
	private DefaultLocaleMessageSource bundle;

	private String currentTab;
	private String historialPasesException;

	private List<ExternalHistorialOperacionDTO> pases;
	private TomaVistaResponse tomaVista;

	public void init() {
		if (getExpediente() == null) {
			setExpediente(getExpedienteService().getExpedienteFamiliaSolicitudById(getIdExpediente()));
			if (getExpediente() == null) {
				LOG.info("EXPEDIENTE NO EXISTE");
			} else {
					tomaVista = tomaVistaExternalService.generarTomaVistaSinSuspension(getExpediente().getCodigoSade(),
							getExpediente().getTipoTramite().getUsuarioIniciador());
			}
		}
	}

	/**
	 * Implementa evento de cambio de pesta√±a para la carga de historial de pases,
	 * ya que el init se llama muchas veces.
	 * 
	 * @param event
	 */
	public void onTabChange(TabChangeEvent event) {
		switch (event.getTab().getId()) {
		case TAB_HISTORIAL_PASES:
			currentTab = TAB_HISTORIAL_PASES;
			// Carga historial de pases si no ha ocurrido una excepcion
			if (StringUtils.isBlank(historialPasesException)) {
				try {
					cargarHistorialPases();
				} catch (Exception e) {
					historialPasesException = e.getMessage();
				}
			}
			break;
		default:
			currentTab = "";
		}
	}

	/**
	 * Muestra dialogo de error con la excepcion del historial de pases si es que
	 * existe.
	 */
	public void showHistorialDePasesException() {
		if (TAB_HISTORIAL_PASES.equals(currentTab) && StringUtils.isNotBlank(historialPasesException)) {
			showDialogMessage(historialPasesException, MessageType.ERROR);
		}
	}

	private void cargarHistorialPases() {
		if (getExpediente().getEstadoTramite().getId().equals(EstadoTramiteEnum.ENTRAMITE.getId())) {
			if (pases == null) {
				pases = new ArrayList<>();
			} else {
				pases.clear();
			}
			pases = externalHistorialOperacionService.getHistorialByExpediente(getExpediente().getCodigoSade());
		}
	}

	/**
	 * Return the list of documents from the Expediente without the document
	 * generated by Vuc with the data of the Persona.
	 * 
	 * @return
	 */
	public List<DocumentoDTO> documentosExpedienteList() {
		List<DocumentoDTO> retorno = new ArrayList<>();
		if (isBorrador()) {
			for (DocumentoDTO aux : getExpediente().getDocumentosList()) {
				if (!aux.getTipoDocumento().equals(getExpediente().getTipoTramite().getTipoDocumentoFormulario())) {
					retorno.add(aux);
				}
			}
		} else {
			for (DocumentoTVDTO aux : tomaVista.getListDocumentosOficiales()) {
					DocumentoDTO dto = new DocumentoDTO();
					dto.setNombreOriginal(aux.getNombreOriginal());
					dto.setReferencia(aux.getReferencia());
					dto.setFechaCreacion(aux.getFechaAsociacion());
					dto.setNumeroDocumento(aux.getNumero());
					dto.setUsuarioCreacion(getExpediente().getTipoTramite().getUsuarioIniciador());
					retorno.add(dto);
			}
		}
		sortDocumentos(retorno);
		return retorno;
	}
	
	public StreamedContent cmdDownloadDocument(DocumentoDTO doc) {
		String contentType = "application/octet-stream";
		try {
			return new DefaultStreamedContent(documentoService.downloadDocument(doc),
					contentType, doc.getNumeroDocumento()+".pdf");
		} catch (DownloadDocumentException e) {
			showDialogMessage(e.getMessage(), MessageType.ERROR);
		} catch (ValidacionException e2) {
			showDialogMessage(bundle.getMessage("myDocumentsErrorSistema", null), MessageType.ERROR);
		}

		return null;
	}

	/**
	 * Sorts the Documentos from the Expediente by Required first and Optional
	 * second.
	 * 
	 * @param docs
	 */
	private void sortDocumentos(List<DocumentoDTO> docs) {
		Collections.sort(docs, new Comparator<DocumentoDTO>() {
			@Override
			public int compare(DocumentoDTO doc1, DocumentoDTO doc2) {
				 return doc1.getFechaCreacion().compareTo(doc2.getFechaCreacion());
			}
		});
	}

	public List<ExternalHistorialOperacionDTO> getPases() {
		return pases;
	}

	public void setExternalHistorialOperacionService(
			ExternalHistorialOperacionService externalHistorialOperacionService) {
		this.externalHistorialOperacionService = externalHistorialOperacionService;
	}

	public void setTomaVistaExternalService(ITomaVistaExternalService tomaVistaExternalService) {
		this.tomaVistaExternalService = tomaVistaExternalService;
	}
	
	public void setDocumentoService(DocumentoService documentoService) {
		this.documentoService = documentoService;
	}
	
	public void setBundle(DefaultLocaleMessageSource bundle) {
		this.bundle = bundle;
	}

	@Override
	public void cmdCancel() {
		redirect(ConstantsUrl.MY_APPLICATIONS);
	}
	

}