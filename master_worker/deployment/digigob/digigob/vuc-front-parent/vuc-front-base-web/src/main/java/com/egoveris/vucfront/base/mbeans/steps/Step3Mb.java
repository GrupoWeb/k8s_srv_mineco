package com.egoveris.vucfront.base.mbeans.steps;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.apache.commons.lang3.StringUtils;
import org.primefaces.event.TabChangeEvent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.egoveris.te.ws.model.ExternalHistorialOperacionDTO;
import com.egoveris.te.ws.service.ExternalHistorialOperacionService;
import com.egoveris.vucfront.base.mbeans.LoginMb;
import com.egoveris.vucfront.base.util.ConstantsUrl;
import com.egoveris.vucfront.base.util.MessageType;
import com.egoveris.vucfront.model.model.DocumentoDTO;
import com.egoveris.vucfront.model.model.ExpedienteFamiliaSolicitudDTO;
import com.egoveris.vucfront.model.model.TipoTramiteTipoDocDTO;
import com.egoveris.vucfront.model.util.EstadoTramiteEnum;

@ManagedBean
@ViewScoped
public class Step3Mb extends StepParentMb {
	private static final long serialVersionUID = 5892122344636937590L;

	private static final Logger LOG = LoggerFactory.getLogger(Step3Mb.class);
	private static final String TAB_HISTORIAL_PASES = "tabHistorialPases";
	
	@ManagedProperty("#{historialOperacionService}")
	private ExternalHistorialOperacionService externalHistorialOperacionService;
	
	@ManagedProperty("#{loginMb}")
	private LoginMb login;

	private String currentTab;
	private String historialPasesException;

	private List<ExternalHistorialOperacionDTO> pases;
	private Set<Long> requiredDocuments;
	
	private String titularTarjeta;
	
	private String nroTarjeta;

	public void init() {
		if (getExpediente() == null) {
			setExpediente(getExpedienteService().getExpedienteFamiliaSolicitudById(getIdExpediente()));
			if (getExpediente() == null) {
				LOG.info("EXPEDIENTE NO EXISTE");
			} else {
				setRequiredDocuments();
			}
		}
	}

	/**
	 * Implementa evento de cambio de pesta√±a para la carga de historial de pases,
	 * ya que el init se llama muchas veces.
	 * 
	 * @param event
	 */
	public void onTabChange(TabChangeEvent event) {
		switch (event.getTab().getId()) {
		case TAB_HISTORIAL_PASES:
			currentTab = TAB_HISTORIAL_PASES;
			// Carga historial de pases si no ha ocurrido una excepcion
			if (StringUtils.isBlank(historialPasesException)) {
				try {
					cargarHistorialPases();
				} catch (Exception e) {
					historialPasesException = e.getMessage();
				}
			}
			break;
		default:
			currentTab = "";
		}
	}

	/**
	 * Muestra dialogo de error con la excepcion del historial de pases si es que
	 * existe.
	 */
	public void showHistorialDePasesException() {
		if (TAB_HISTORIAL_PASES.equals(currentTab) && StringUtils.isNotBlank(historialPasesException)) {
			showDialogMessage(historialPasesException, MessageType.ERROR);
		}
	}

	private void cargarHistorialPases() {
		if (getExpediente().getEstadoTramite().getId().equals(EstadoTramiteEnum.ENTRAMITE.getId())) {
			if (pases == null) {
				pases = new ArrayList<>();
			} else {
				pases.clear();
			}
			pases = externalHistorialOperacionService.getHistorialByExpediente(getExpediente().getCodigoSade());
		}
	}

	/**
	 * Return the list of documents from the Expediente without the document
	 * generated by Vuc with the data of the Persona.
	 * 
	 * @return
	 */
	public List<DocumentoDTO> documentosExpedienteList() {
		List<DocumentoDTO> retorno = new ArrayList<>();
		for (DocumentoDTO aux : getExpediente().getDocumentosList()) {
			if (!aux.getTipoDocumento().equals(getExpediente().getTipoTramite().getTipoDocumentoFormulario())) {
				retorno.add(aux);
			}
		}
		return retorno;
	}

	/**
	 * Sorts the Documentos from the Expediente by Required first and Optional
	 * second.
	 * 
	 * @param expediente
	 */
	private void sortDocumentos(ExpedienteFamiliaSolicitudDTO expediente) {
		Collections.sort(expediente.getDocumentosList(), new Comparator<DocumentoDTO>() {
			@Override
			public int compare(DocumentoDTO doc1, DocumentoDTO doc2) {
				return Boolean.compare(isRequired(doc2), isRequired(doc1));
			}
		});
	}

	/**
	 * Sets the required Documents.
	 */
	private void setRequiredDocuments() {
		if (requiredDocuments == null) {
			requiredDocuments = new HashSet<>();

			for (TipoTramiteTipoDocDTO aux : getExpediente().getTipoTramite().getTipoTramiteTipoDoc()) {
				if (aux.getObligatorio()) {
					requiredDocuments.add(aux.getTipoDoc().getId());
				}
			}
			sortDocumentos(getExpediente());
		}
	}

	/**
	 * Check's if a document is required by the TipoTramite.
	 * 
	 * @param document
	 * @return
	 */
	public Boolean isRequired(DocumentoDTO document) {
		Boolean retorno = false;
		if (requiredDocuments != null && !requiredDocuments.isEmpty()
				&& requiredDocuments.contains(document.getTipoDocumento().getId())) {
			retorno = true;
		}
		return retorno;
	}

	public void cmdBack() {
		redirect(ConstantsUrl.STEP2.concat(getExpediente().getId().toString()));
	}
	
	public void cmdInicio() {
		redirect(ConstantsUrl.INDEX);
	}
	
	public void cmdFinalizar() {
		if (isBorrador()) {
			try {
				Map<String, String> infoPago = new HashMap<>();
				infoPago.put("nroTarjeta", this.nroTarjeta);
				infoPago.put("titular", this.titularTarjeta);

				if(getExpediente().getTipoTramite().getMonto()!=null) {					
					getExpediente().setMonto(
							new BigDecimal(getExpediente().getTipoTramite().getMonto()));
				}
				
				getExpedienteService().sendApplication(getExpediente(),infoPago);
				execute("PF('OkMessage').show()");
			} catch (Exception e) {
				showDialogMessage(e.getMessage(), MessageType.ERROR);
				e.printStackTrace();
			}
		}
	}

	public List<ExternalHistorialOperacionDTO> getPases() {
		return pases;
	}

	public void setExternalHistorialOperacionService(
			ExternalHistorialOperacionService externalHistorialOperacionService) {
		this.externalHistorialOperacionService = externalHistorialOperacionService;
	}
	
	public void setLogin(LoginMb login) {
		this.login = login;
	}

	public String getTitularTarjeta() {
		return titularTarjeta;
	}

	public void setTitularTarjeta(String titularTarjeta) {
		this.titularTarjeta = titularTarjeta;
	}

	public String getNroTarjeta() {
		return nroTarjeta;
	}

	public void setNroTarjeta(String nroTarjeta) {
		this.nroTarjeta = nroTarjeta;
	}

}